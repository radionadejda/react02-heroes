1. Что такое props и можно ли использовать props в функциональных компонентах?
Props (сокращение от "properties" - свойства) - это объект, который содержит данные, передаваемые из родительского компонента в дочерний компонент в React. Он используется для передачи данных от компонента к компоненту в древе React-компонентов.
Да, функциональные компоненты в React также могут использовать props. Ранее, до появления хуков, функциональные компоненты использовались преимущественно только для принятия props и отображения данных. С появлением хуков, таких как useState, useEffect и других, функциональные компоненты стали иметь более широкий спектр возможностей, позволяя им содержать состояние и эффекты жизненного цикла.


2. Нужно ли выделять в отдельный компонент статью в блоге?
Разделение содержимого в блоге на отдельные компоненты может быть хорошей практикой, особенно если статьи в блоге имеют похожую структуру или содержат множество повторяющихся элементов. Создание отдельного компонента для статьи в блоге может упростить управление содержимым, повысить его переиспользуемость и облегчить поддержку кода.

3. Можно ли использовать React без JSX?
Да, можно использовать React без JSX
JSX — особый синтаксис, позволяющий совмещать HTML-разметку и элементы JS для создания реактивных компонентов.

4. Чем отличается JSX от HTML?
По большей части синтаксис и структура JSX и HTML совпадают, но есть некоторые важные различия:
1. так как это похожий на XML синтаксис, одиночные теги в JSX должны быть закрыты: `<hr />`;
2. вместо атрибута `class` в JSX используется имя свойства в DOM: `className`;

5. Для чего нам нужны свойства (props) компонентов?
Свойства позволяют родительским компонентам передавать данные (например, строки, числа, объекты, функции) дочерним компонентам. Эти данные могут быть использованы внутри дочерних компонентов для отображения информации, изменения состояния или выполнения других действий.
Использование свойств позволяет создавать многоразовые и переиспользуемые компоненты. Родительские компоненты могут определять различные свойства для дочерних компонентов.
Свойства позволяют динамически менять поведение компонентов. Родительский компонент может изменять значения свойств, передаваемых дочернему компоненту, что позволяет компонентам отображать различное содержимое или реагировать на изменения данных.
Использование свойств облегчает коммуникацию между компонентами в React-приложении. Они позволяют передавать данные сверху вниз по иерархии компонентов (от родительских к дочерним компонентам).

6. В примере с `CardList` чем можно было бы заменить `<React.Fragment>`?
Существует и короткий синтаксис, но пока что его поддерживают не все популярные инструменты:
вместо <React.Fragment> можно обернуть код в пустые скобки <></> .

7. Можно ли сказать, что классовые и функциональные компоненты равнозначны по функциональности?
В основе классовых и функциональных компонентов в React лежит одна и та же концепция создания пользовательских компонентов, но есть некоторые различия в синтаксисе и возможностях, которые важно учитывать.
Во многих старых статьях про React вы увидите фразу, что функциональные компоненты используются, когда нет внутреннего состояния, только props. 
Но в версии 16.8 React появились hooks (хуки), что поставило функциональные компоненты вровень с классовыми, а также сделало их более лёгкими в написании и даже потенциально превосходящими классовые компоненты. Сейчас функциональные компоненты наиболее широко используются, вытесняя классовые.

8. Можно ли полностью описать приложение, используя только функциональные компоненты?
Да, в настоящее время в React можно полностью описать приложение, используя только функциональные компоненты. С появлением хуков (Hooks) в React, таких как useState, useEffect и других, функциональные компоненты получили расширенную функциональность, которая ранее была доступна только в классовых компонентах.

9. Какой командой мы делаем экспорт компонента для возможности его использования в других местах приложения?
Экспорт компонента для его дальнейшего использования в других частях приложения осуществляется с помощью ключевого слова export. например 
в компоненте 
export function Button(props) {} или
function Button(props) {}
export default Button
в родителе import Button from './Button';

10. Изучите структуру компонент в проекте https://github.com/alisa-tsvetkova/EthereumUI и напишите, какой именно компонент является самым верхним, а какой самым «глубоким»?

App из App.js - самый верхний. за ним:
Block
BlockInfo 
TranTable 
TranTable из blockTranTable.js - самый глубокий

11. Какой командой можно сгенерировать разметку/компоненты на основе заранее заданного массива элементов? Приведите пример.
В React нет прямой встроенной функции для генерации компонентов или разметки на основе массива элементов. можно использовать метод JavaScript map() для преобразования массива элементов в массив React-компонентов или разметку.
Например:

const data = [
  { id: 1, text: 'Item 1' },
  { id: 2, text: 'Item 2' },
  { id: 3, text: 'Item 3' },
// etc
];

export const Component = () => {
  return (
    <div>
      data.map(item => (
    <div key={item.id}>
      <p>{item.text}</p>
    </div>
    </div>
  );
};



